return {
    "folke/snacks.nvim",
    priority = 1000,
    lazy = false,
    keys = {
        { "<leader>/", "<cmd>lua Snacks.picker.search_history()<cr>", desc = "Search History" },
        { "<leader>:", "<cmd>lua Snacks.picker.command_history()<cr>", desc = "Command History" },
        { "<leader><leader>", "<cmd>lua Snacks.picker.recent()<cr>", desc = "Recent" },
        { "<leader>f:", "<cmd>lua Snacks.picker.commands()<cr>", desc = "Commands" },
        { "<leader>f<leader>", "<cmd>lua Snacks.picker.resume()<cr>", desc = "Resume" },
        { "<leader>fB", "<cmd>lua Snacks.picker.grep_buffers()<cr>", desc = "Grep Open Buffers" },
        { "<leader>fC", "<cmd>lua Snacks.picker.colorschemes()<cr>", desc = "Colorschemes" },
        { "<leader>fD", "<cmd>lua Snacks.picker.diagnostics_buffer()<cr>", desc = "Buffer Diagnostics" },
        { "<leader>fH", "<cmd>lua Snacks.picker.highlights()<cr>", desc = "Highlights" },
        { "<leader>fL", "<cmd>lua Snacks.picker.lines()<cr>", desc = "Buffer Lines" },
        { "<leader>fM", "<cmd>lua Snacks.picker.man()<cr>", desc = "Man Pages" },
        { "<leader>fa", "<cmd>lua Snacks.picker.autocmds()<cr>", desc = "Autocmds" },
        { "<leader>fb", "<cmd>lua Snacks.picker.buffers()<cr>", desc = "Buffers" },
        { "<leader>fd", "<cmd>lua Snacks.picker.diagnostics()<cr>", desc = "Diagnostics" },
        { "<leader>fe", "<cmd>lua Snacks.explorer()<cr>", desc = "File Explorer" },
        { "<leader>ff", "<cmd>lua Snacks.picker.files()<cr>", desc = "Find Files" },
        { "<leader>fg", "<cmd>lua Snacks.picker.grep()<cr>", desc = "Grep" },
        { "<leader>fh", "<cmd>lua Snacks.picker.help()<cr>", desc = "Help Pages" },
        { "<leader>fi", "<cmd>lua Snacks.picker.icons()<cr>", desc = "Icons" },
        { "<leader>fj", "<cmd>lua Snacks.picker.jumps()<cr>", desc = "Jumps" },
        { "<leader>fk", "<cmd>lua Snacks.picker.keymaps()<cr>", desc = "Keymaps" },
        { "<leader>fl", "<cmd>lua Snacks.picker.loclist()<cr>", desc = "Location List" },
        { "<leader>fm", "<cmd>lua Snacks.picker.marks()<cr>", desc = "Marks" },
        { "<leader>fn", "<cmd>lua Snacks.picker.notifications()<cr>", desc = "Notification History" },
        {
            "<leader>fo",
            "<cmd>lua Snacks.picker.files({ cwd = vim.fn.stdpath('config') })<cr>",
            desc = "Find Config File",
        },
        { "<leader>fp", "<cmd>lua Snacks.picker.projects()<cr>", desc = "Projects" },
        { "<leader>fq", "<cmd>lua Snacks.picker.qflist()<cr>", desc = "Quickfix List" },
        { "<leader>fr", "<cmd>lua Snacks.picker.registers()<cr>", desc = "Registers" },
        { "<leader>fs", "<cmd>lua Snacks.picker.smart()<cr>", desc = "Smart Find Files" },
        { "<leader>fu", "<cmd>lua Snacks.picker.undo()<cr>", desc = "Undo History" },
        {
            "<leader>fw",
            "<cmd>lua Snacks.picker.grep_word()<cr>",
            desc = "Visual selection or word",
            mode = { "n", "x" },
        },
        { "<leader>fz", "<cmd>lua Snacks.picker.lazy()<cr>", desc = "Search for Plugin Spec" },
        { "<leader>gF", "<cmd>lua Snacks.picker.git_files()<cr>", desc = "Find Git Files" },
        { "<leader>gL", "<cmd>lua Snacks.picker.git_log()<cr>", desc = "Git Log" },
        { "<leader>gS", "<cmd>lua Snacks.picker.git_stash()<cr>", desc = "Git Stash" },
        { "<leader>gb", "<cmd>lua Snacks.picker.git_branches()<cr>", desc = "Git Branches" },
        { "<leader>gd", "<cmd>lua Snacks.picker.git_diff()<cr>", desc = "Git Diff (Hunks)" },
        -- { "<leader>gl", "<cmd>lua Snacks.git.blame_line()<cr>", desc = "Blame line" },
        { "<leader>glf", "<cmd>lua Snacks.picker.git_log_file()<cr>", desc = "Git Log File" },
        { "<leader>gll", "<cmd>lua Snacks.picker.git_log_line()<cr>", desc = "Git Log Line" },
        { "<leader>gs", "<cmd>lua Snacks.picker.git_status()<cr>", desc = "Git Status" },
        { "<leader>gx", "<cmd>lua Snacks.gitbrowse()<cr>", desc = "Open git file in browser" },
        { "gO", "<cmd>lua Snacks.picker.lsp_symbols()<cr>", desc = "LSP Symbols" },
        { "gW", "<cmd>lua Snacks.picker.lsp_workspace_symbols()<cr>", desc = "LSP Workspace Symbols" },
        { "grD", "<cmd>lua Snacks.picker.lsp_declarations()<cr>", desc = "Goto Declaration" },
        { "grI", "<cmd>lua Snacks.picker.lsp_implementations()<cr>", desc = "Goto Implementation" },
        { "grd", "<cmd>lua Snacks.picker.lsp_definitions()<cr>", desc = "Goto Definition" },
        { "gri", "<cmd>lua Snacks.picker.lsp_incoming_calls()<cr>", desc = "C[a]lls Incoming" },
        { "gro", "<cmd>lua Snacks.picker.lsp_outgoing_calls()<cr>", desc = "C[a]lls Outgoing" },
        { "grr", "<cmd>lua Snacks.picker.lsp_references()<cr>", desc = "References" },
        { "grt", "<cmd>lua Snacks.picker.lsp_type_definitions()<cr>", desc = "Goto Type Definition" },
        {
            "<leader>ti",
            "<cmd>lua if Snacks.indent.enabled then Snacks.indent.disable() else Snacks.indent.enable() end<cr>",
            desc = "Toggle indent guides",
        },
    },
    opts = {
        bigfile = { enabled = true },
        image = {},
        indent = {
            indent = {
                char = "‚ñè",
            },
            scope = {
                enabled = false,
            },
        },
        picker = {},
        scroll = not vim.g.neovide and not vim.g.vscode and {} or nil,
        quickfile = { enabled = true },
    },
}
